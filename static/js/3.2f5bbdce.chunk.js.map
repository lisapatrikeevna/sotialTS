{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","common/lsLoginHOC.tsx","components/TemplateProfile/ProfileInfo/ProfileInfo.module.css","assets/img/undraw_faq_rjoy.png","components/TemplateProfile/MyPosts/MyPost.module.css","components/css/Profile.module.css","common/accordion/AccordonStyle.module.css","assets/img/baner1.png","assets/img/undraw_cloud_docs_p4ob.png","components/TemplateProfile/ProfileInfo/ProfileStatus.tsx","common/accordion/Accordion.tsx","components/TemplateProfile/ProfileInfo/IsOwer.tsx","components/TemplateProfile/ProfileInfo/Visitor.tsx","components/TemplateProfile/ProfileInfo/ProfileInfo.tsx","components/TemplateProfile/MyPosts/Post.tsx","components/TemplateProfile/MyPosts/MyPosts.tsx","components/TemplateProfile/MyPosts/MyPostsWrap.tsx","components/Profile.tsx","components/ProfileWrap.tsx"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","mapStateToPropsForRedirect","state","aught","auth","IsLoginRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","ProfileStatus","useState","editMode","setEditMode","status","setValue","useEffect","autoFocus","onChange","e","currentTarget","onBlur","updateStatus","onDoubleClick","Accordion","collapsed","setCollapsed","className","cl","parent","AccordionTitle","title","titleValue","onClickHandler","AccordionBody","items","onClick","wrapList","map","itemList","key","id","href","link","name","desk","IsOwnerForm","reduxForm","form","validate","profile","handleSubmit","error","initialValues","onSubmit","loginForm","Field","type","placeholder","component","renderTextField","label","variant","input","style","borderColor","keys","contacts","renderCheckbox","errorForm","IsOwner","editProfile","profileInfo","width","formData","saveProfileTC","avaDesc","src","photos","large","imgAvatar","ava","alt","wrap","fullName","contactList","target","files","changePhoto","lookingForAJob","lookingForAJobDescription","Visitor","ProfileInfo","Preloader","contact","facebook","github","instagram","mainLink","twitter","vk","website","youtube","isOwner","Post","item","message","likesCount","MyPosts","memo","postsElement","posts","d","post","PostReduxForm","console","log","addChangePost","sendMessage","btnAddet","MyPostsWrap","messageForNewPost","dispatch","AddChangePostAC","Profile","main__image","mainImage","baner","updateUserStatusTC","ProfileWrap","userID","match","params","authorizedUserID","history","getUserProfileTC","getUserStatusTC","refreshProfile","prevProps","prevState","snapshot","changePhotoTC","compose","withRouter"],"mappings":"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","file":"static/js/3.2f5bbdce.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","// import {Redirect} from \"react-router-dom\";\r\n// import React from \"react\";\r\n// import {InitialStateType} from \"../redux/AuthReducer\";\r\n// import {connect} from \"react-redux\";\r\n//\r\n// let mapStateToPropsRedirec = (state:InitialStateType)=>({\r\n//     aught: state.aught\r\n// })\r\n// export const IsLoginRedirect = (SomeComponent: any) => {\r\n//\r\n//     // return (props: any) => {\r\n//     //    //debugger\r\n//     //\r\n//     //     return <SomeComponent {...props}/>\r\n//     // }\r\n//     class RedirectComponent extends React.Component<any, any> {\r\n//         render() {\r\n//             if (!this.props.aught) return <Redirect to='login'/>\r\n//             return <SomeComponent {...this.props}/>\r\n//         }\r\n//     }\r\n//     // return RedirectComponent;\r\n//     let AughtRedirectComponent= connect(mapStateToPropsRedirec)(RedirectComponent)\r\n//     return AughtRedirectComponent;\r\n//\r\n// }\r\n// {!props.aught ? <Redirect to='login'/> :\r\n//     <SomeComponent {...props}/>\r\n// }\r\n// !props.aught &&<> <Redirect to='login'/></>\r\n// const aught =useSelector<RootStateType,boolean>(state=>state.auth.aught)\r\n// if (!props.aught) { return <Redirect to='login'/> }\r\n\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { RootStateType } from \"../redux/ReduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: RootStateType) => ({\r\n    aught: state.auth.aught\r\n});\r\n\r\nexport const  IsLoginRedirect  = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component <any>{\r\n        render() {\r\n            if (!this.props.aught) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}\r\n\r\n\r\n// import { Redirect } from \"react-router-dom\";\r\n// import React from \"react\";\r\n//\r\n// export const IsLoginRedirect = (SomeComponent:any)=>{\r\n//     debugger\r\n//     return(props:any)=>{\r\n//         return<>\r\n//         if(!props.aught)<Redirect to='login'/>\r\n//             <SomeComponent {...props}/>\r\n//         </>\r\n//     }\r\n// }\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ava\":\"ProfileInfo_ava__10wIf\",\"profileInfo\":\"ProfileInfo_profileInfo__CLp-r\",\"avaDesc\":\"ProfileInfo_avaDesc__sL59K\",\"wrap\":\"ProfileInfo_wrap__v2nQn\",\"lastName\":\"ProfileInfo_lastName__2Ztaf\",\"maskFoto\":\"ProfileInfo_maskFoto__1l-0O\"};","module.exports = __webpack_public_path__ + \"static/media/undraw_faq_rjoy.c740d21c.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnAddet\":\"MyPost_btnAddet__lAbUB\",\"post\":\"MyPost_post__2X11K\",\"item\":\"MyPost_item___JfUO\",\"ava-desc\":\"MyPost_ava-desc__2R1LE\",\"sendMessage\":\"MyPost_sendMessage__2105L\",\"posts\":\"MyPost_posts__2n7sy\",\"wrap\":\"MyPost_wrap__3_P3S\",\"message\":\"MyPost_message__1wRiR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Profile_post__2rkd0\",\"baner\":\"Profile_baner__A9eB-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"parent\":\"AccordonStyle_parent__1qdi6\",\"wrapList\":\"AccordonStyle_wrapList__1owbf\",\"itemList\":\"AccordonStyle_itemList__14b1U\"};","module.exports = __webpack_public_path__ + \"static/media/baner1.60a04670.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_cloud_docs_p4ob.defd5d0e.png\";","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\n\r\ntype propsType = {\r\n    status: string\r\n    updateStatus?: (status: string) => void\r\n}\r\n\r\nexport const ProfileStatus = (props: propsType) => {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [value, setValue] = useState(props.status);\r\n    useEffect(()=>{\r\n        setValue(props.status)\r\n    },[props.status])\r\n    \r\n    const onEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const offEditMode = () => {\r\n        setEditMode(false)\r\n        if(props.updateStatus) {\r\n            props.updateStatus(value)\r\n        }\r\n    }\r\n\r\n    const onChangeStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {!editMode ?\r\n                <span onDoubleClick={onEditMode}>\r\n                    {props.status || 'dont have status'}\r\n                 </span>  :\r\n                <input value={value} autoFocus\r\n                       onChange={onChangeStatus}\r\n                       onBlur={offEditMode}\r\n                />\r\n            }\r\n        </div>);\r\n}\r\n","import React, {useState} from \"react\";\r\nimport cl from './AccordonStyle.module.css'\r\n\r\ntype AccordionType = {\r\n    items: Array<itemType>\r\n    titleValue: string\r\n}\r\n\r\nexport function Accordion(props: AccordionType) {\r\n    let [collapsed, setCollapsed] = useState(true)\r\n\r\n    return (\r\n        <div className={cl.parent}>\r\n            <AccordionTitle title={props.titleValue} onClickHandler={() => {\r\n                setCollapsed(!collapsed)\r\n            }}/>\r\n            {!collapsed && <AccordionBody items={props.items}/>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype AccordionTitleType = {\r\n    title: string\r\n    onClickHandler: () => void\r\n}\r\n\r\nexport function AccordionTitle(props: AccordionTitleType) {\r\n    return (\r\n        <h6 onClick={props.onClickHandler}>{props.title}</h6>\r\n    )\r\n}\r\n\r\nexport type itemType = {\r\n    name: string\r\n    desk?: any\r\n    id: number\r\n    link?: string\r\n}\r\nexport type AccordionBodyType = {\r\n    // items: any\r\n    items: Array<itemType>\r\n}\r\nexport function AccordionBody(props: AccordionBodyType) {\r\n    // return <ul style={{position:\"absolute\"}}>\r\n    return <ul className={ `${cl.wrapList}`}>\r\n        {props.items.map(i => {\r\n            return <li className={cl.itemList} key={i.id}><a href={i.link}>{i.name}:{i.desk} </a></li>\r\n        })}\r\n    </ul>\r\n\r\n}\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport cl from './ProfileInfo.module.css';\r\nimport imgAvatar from '../../../assets/img/undraw_faq_rjoy.png';\r\nimport {AxiosGetType} from \"../../ProfileWrap\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {Accordion, itemType} from \"../../../common/accordion/Accordion\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {renderCheckbox, renderTextField} from \"../../../common/FormControl/FormControl\";\r\nimport {validate} from \"../../../expansive/validate\";\r\n\r\n\r\nconst IsOwnerChangeData: React.FC<InjectedFormProps<AxiosGetType, PropsType> & PropsType> = (\r\n    {\r\n        profile, handleSubmit, initialValues,error\r\n    }) =>{\r\n    return (\r\n        <form onSubmit={handleSubmit} className={cl.loginForm}>\r\n            <Field type='text' placeholder={'aboutMe'} component={renderTextField} name={'aboutMe'}\r\n                   id=\"outlined-multiline-flexible\" label='aboutMe' variant=\"outlined\"\r\n                   className={cl.input} style={{borderColor: 'green'}}/>\r\n            <p>contacts:{\r\n                Object.keys(profile.contacts).map(i => {\r\n                    return <div key={i}>\r\n                        <b>{i} : </b><Field type='text' placeholder={i} component={renderTextField} name={i}\r\n                                           id=\"outlined-multiline-flexible\"\r\n                                           label={i} variant=\"outlined\" className={cl.input}\r\n                                           style={{borderColor: 'green'}}/>\r\n                    </div>\r\n                })}</p>\r\n            <label >looking for a job\r\n                <Field type=\"checkbox\" component={renderCheckbox} name={'lookingForAJob'}/>\r\n            </label>\r\n            <Field type=\"text\" placeholder={'lookingForAJobDescription'} component={renderTextField}\r\n                   name={'lookingForAJobDescription'} id=\"outlined-multiline-flexible\"\r\n                   label='looking for a job description' variant=\"outlined\"/>\r\n            <Field type='text' placeholder={'fullName'} component={renderTextField} name={'fullName'}\r\n                   id=\"outlined-multiline-flexible\" label='fullName' variant=\"outlined\"\r\n                   className={cl.input} style={{borderColor: 'green'}}/>\r\n            {error && <div className={cl.errorForm}>{error}</div>}\r\n            <button type={\"submit\"}>save</button>\r\n        </form>\r\n    )\r\n}\r\n\r\ntype PropsType = {\r\n    profile: AxiosGetType\r\n}\r\n//const IsOwnerForm = reduxForm<FormDataType>({form: 'IsOwner', validate})(IsOwnerChangeData)\r\nconst IsOwnerForm = reduxForm<AxiosGetType, PropsType>({form: 'IsOwner', validate})(IsOwnerChangeData)\r\n\r\ntype propsType = {\r\n    profile: AxiosGetType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner?: boolean\r\n    changePhoto: (photo: any) => void\r\n    contactList: Array<itemType>\r\n    saveProfileTC:(data:any)=>void\r\n}\r\n\r\nfunction IsOwner(props: propsType) {\r\n    let [editMode, setEditMode]= useState(false)\r\n    const changePhoto = (e: ChangeEvent<HTMLInputElement>) => {\r\n        //@ts-ignore\r\n        if (e.target.files.length) {\r\n            //@ts-ignore\r\n            props.changePhoto(e.target.files[0])\r\n        }\r\n    }\r\n    const onSubmit = (formData: any) => {\r\n        props.saveProfileTC(formData)\r\n            // .then(()=> {\r\n            //     someChanged\r\n            // })\r\n        editProfile()\r\n    }\r\n    const editProfile = () =>{\r\n        setEditMode(!editMode)\r\n    }\r\n    return (\r\n        <div className={cl.profileInfo} style={{width: '80%'}}>\r\n            <button onClick={editProfile}> edit profile</button>\r\n            {!editMode?\r\n                <div>\r\n                    <div className={cl.avaDesc}>\r\n                        <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n                        <div>\r\n                            <img src={props.profile.photos.large ? props.profile.photos.large : imgAvatar} className={cl.ava}\r\n                                 alt=\"ava\"/>\r\n                        </div>\r\n                        <div className={cl.wrap}>\r\n                            <p className={cl.name}>{props.profile.fullName}</p>\r\n                        </div>\r\n                        <Accordion items={props.contactList} titleValue={'contacts'}/>\r\n                    </div>\r\n                    <input type=\"file\" onChange={changePhoto}/>\r\n                    <div>\r\n                        <h6>looking for a job:{props.profile.lookingForAJob ? 'yes' : 'no'}</h6>\r\n                        <br/>\r\n                        <h6>Description:{props.profile.lookingForAJobDescription ?\r\n                            <h6>{props.profile.lookingForAJobDescription}</h6> : 'dont have'}</h6>\r\n                    </div>\r\n\r\n                </div>\r\n                : <IsOwnerForm profile={props.profile} initialValues={props.profile} onSubmit={onSubmit}/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\n//profile={props.profile}\r\nexport default IsOwner;\r\n","import React, {ChangeEvent} from 'react';\r\nimport cl from './ProfileInfo.module.css';\r\nimport imgAvatar from '../../../assets/img/undraw_faq_rjoy.png';\r\nimport {Preloader} from \"../../../common/Preloader\";\r\nimport {AxiosGetType, contactsType} from \"../../ProfileWrap\";\r\nimport {ProfileStatus} from \"./ProfileStatus\";\r\nimport {Accordion, itemType} from \"../../../common/accordion/Accordion\";\r\n\r\ntype propsType = {\r\n    profile: AxiosGetType\r\n    status: string\r\n    contactList: Array<itemType>\r\n}\r\n\r\nfunction Visitor(props: propsType) {\r\n\r\n    return (\r\n        <div className={cl.profileInfo} style={{width: '80%'}}>\r\n            <div className={cl.avaDesc}>\r\n                <ProfileStatus status={props.status}/>\r\n                <div>\r\n                    <img src={props.profile.photos.large ? props.profile.photos.large : imgAvatar} className={cl.ava}\r\n                         alt=\"ava\"/>\r\n                    {/*<span className={cl.maskFoto}></span>*/}\r\n                </div>\r\n                <div className={cl.wrap}>\r\n                    <p className={cl.name}>{props.profile.fullName}</p>\r\n                </div>\r\n                <Accordion items={props.contactList} titleValue={'contacts'}/>\r\n            </div>\r\n            <div>\r\n                <h6>{props.profile.lookingForAJob ? <h6>looking for a job:{props.profile.lookingForAJob}</h6> : ''}</h6>\r\n                <br/>\r\n                <h6>{props.profile.lookingForAJobDescription ?\r\n                    <h6>Description:{props.profile.lookingForAJobDescription}</h6> : ''}</h6>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Visitor;\r\n\r\n","import React, {ChangeEvent} from 'react';\r\nimport cl from './ProfileInfo.module.css';\r\nimport {Preloader} from \"../../../common/Preloader\";\r\nimport {AxiosGetType, contactsType} from \"../../ProfileWrap\";\r\nimport IsOwner from \"./IsOwer\";\r\nimport Visitor from \"./Visitor\";\r\n\r\ntype propsType = {\r\n    profile: AxiosGetType\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n    isOwner?: boolean\r\n    changePhoto: (photo: any) => void\r\n    saveProfileTC:(data:any)=>void\r\n}\r\nexport type itemType={\r\n    name: string\r\n    desk: string\r\n    id: number\r\n    link: string\r\n}\r\nfunction ProfileInfo(props: propsType) {\r\n    if (!props.profile) {\r\n        return <Preloader/>\r\n    }\r\n    let contact: contactsType = props.profile.contacts;\r\n    let items:Array<itemType> = [\r\n        {name: 'facebook', desk: contact.facebook, id: 1, link: ''},\r\n        {name: 'github', desk: contact.github, id: 2, link: ''},\r\n        {name: 'instagram', desk: contact.instagram, id: 3, link: ''},\r\n        {name: 'mainLink', desk: contact.mainLink, id: 4, link: ''},\r\n        {name: 'twitter', desk: contact.twitter, id: 5, link: ''},\r\n        {name: 'vk', desk: contact.vk, id: 6, link: ''},\r\n        {name: 'website', desk: contact.website, id: 7, link: ''},\r\n        {name: 'youtube', desk: contact.youtube, id: 8, link: ''},\r\n    ]\r\n\r\n    return (\r\n        // <div className={cl.profileInfo} style={{width: '80%'}}>\r\n        //     <div className={cl.avaDesc}>\r\n        //         {/*<img src={imgAvatar} className={cl.ava} alt=\"ava\"/>*/}\r\n        //         <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>\r\n        //         <div>\r\n        //             <img src={props.profile.photos.large ? props.profile.photos.large : imgAvatar} className={cl.ava}\r\n        //                  alt=\"ava\"/>\r\n        //             <span className={cl.maskFoto}></span>\r\n        //         </div>\r\n        //         <div className={cl.wrap}>\r\n        //             <p className={cl.name}>{props.profile.fullName}</p>\r\n        //         </div>\r\n        //         <Accordion items={items} titleValue={'contacts'}/>\r\n        //     </div>\r\n        //     {props.isOwner && <input type=\"file\" onChange={changePhoto}/>}\r\n        //     <div>\r\n        //         <h6>{props.profile.lookingForAJob ? <h6>looking for a job:{props.profile.lookingForAJob}</h6> : ''}</h6>\r\n        //         <br/>\r\n        //         <h6>{props.profile.lookingForAJobDescription ?\r\n        //             <h6>Description:{props.profile.lookingForAJobDescription}</h6> : ''}</h6>\r\n        //     </div>\r\n        // </div>\r\n        <>\r\n            {props.isOwner\r\n                ? <IsOwner profile={props.profile} status={props.status} updateStatus={props.updateStatus} changePhoto={props.changePhoto} contactList={items} saveProfileTC={props.saveProfileTC}/>\r\n                : <Visitor profile={props.profile} status={props.status} contactList={items} />}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport cl from './MyPost.module.css';\r\nimport imgAvatar from '../../../assets/img/undraw_cloud_docs_p4ob.png';\r\n\r\nexport type postPropsType = {\r\n    message: string\r\n    likesCount: number\r\n    id: number \r\n  } \r\nconst Post = (props:postPropsType) =>{\r\n    return (\r\n      <div className={cl.item} key={props.id}>\r\n        <img src={imgAvatar}/>\r\n        <p className={cl.message}>{props.message }</p>\r\n        <div className={cl.wrap}>\r\n          <span>Like :</span><p>{props.likesCount}</p>\r\n        </div>\r\n            \r\n      </div>\r\n    );\r\n  }\r\n   export default Post;","import React from 'react';\r\nimport cl from './MyPost.module.css';\r\nimport Post from './Post';\r\nimport {postType} from \"../../../redux/ProfileReducer\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\n\r\n\r\ntype propsMyPostsType = {\r\n    posts: Array<postType>\r\n    addChangePost: (value: string) => void\r\n}\r\n\r\n\r\n //const MyPosts=(props: propsMyPostsType)=> {\r\nconst MyPosts=React.memo((props: propsMyPostsType)=> {\r\n    let postsElement = props.posts.map(d => {\r\n        return <Post key={d.id} id={d.id} message={d.message} likesCount={d.likesCount}/>\r\n    });\r\n\r\n    const onSubmit = (value: FormDataType) => {\r\n        console.log(value)\r\n        props.addChangePost(value.post);\r\n    }\r\n    return (\r\n        <div className={cl.post}>\r\n            <h2>My Posts</h2>\r\n            {/*<div className={cl.sendMessage}>*/}\r\n            {/*  <textarea  value={props.message}  onChange={onPostChange} placeholder={\"write your message\"}/>*/}\r\n            {/*   <button  className={cl.btnAddet} onClick={addPost}>Add post</button>*/}\r\n            {/*</div>*/}\r\n            <PostReduxForm onSubmit={onSubmit}/>\r\n            <div className={cl.posts}>\r\n                {postsElement}\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts;\r\ntype  FormDataType = {\r\n    post: string\r\n}\r\nconst PostForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={cl.sendMessage}>\r\n            <p>write new post:</p>\r\n            <Field component={'textarea'} name={'post'} placeholder={'write your message'}/>\r\n            <button className={cl.btnAddet} type={'submit'}>Add post</button>\r\n        </form>\r\n    )\r\n}\r\nconst PostReduxForm = reduxForm<FormDataType>({form: 'posts'})(PostForm);","import React from 'react';\r\nimport {AddChangePostAC,  postType} from \"../../../redux/ProfileReducer\";\r\nimport MyPosts from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../../../redux/ReduxStore\";\r\nimport {Dispatch} from \"redux\";\r\n\r\n// type propsMyPostsType = {\r\n//   // post: Array<postType>\r\n//   // message: string\r\n//   // addChangePost: () => void\r\n//   // onPostChange: (newText:string) => void\r\n//   // dispatch:(action:dispatchActionType) => void\r\n//   // store:any\r\n// }\r\n\r\n\r\n\r\ntype mapStateToPropsType={\r\n    posts:Array<postType>\r\n    message: string\r\n}\r\ntype mapDispatchToPropsType={\r\n    addChangePost:(value:string)=>void\r\n}\r\nlet mapStateToProps = (state: RootStateType):mapStateToPropsType=>{\r\n    return{\r\n        posts:state.profile.posts,\r\n        message:state.profile.messageForNewPost\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch:Dispatch):mapDispatchToPropsType => {\r\n    return {\r\n        addChangePost: (value: string) => {\r\n           // debugger\r\n            dispatch(AddChangePostAC(value))\r\n        },\r\n        // onPostChange: (message:string) => {\r\n        //     dispatch(OnPostChangeActionCreator(message))\r\n        // }\r\n    }\r\n}\r\nconst MyPostsWrap = connect<mapStateToPropsType,mapDispatchToPropsType,{},RootStateType>(mapStateToProps,mapDispatchToProps)(MyPosts)\r\nexport default MyPostsWrap;\r\n\r\n// function MyPostsWrap(props:propsMyPostsType ){\r\n// let state = props.store.getState();\r\n//\r\n//\r\n//   const addChangePost = ()=>{\r\n//       // props.addChangePost();\r\n//       props.store.dispatch(AddChangePostActionCreator());\r\n//   };\r\n//   const onPostChange = (text:string)=>{\r\n//     // let action = OnPostChangeActionCreator(text);\r\n//     // props.onPostChange(text);\r\n//     // props.dispatch({type:'CHANGE-NEW-POST-TEXT',newText:text })\r\n//       props.store.dispatch(OnPostChangeActionCreator(text));\r\n//   }\r\n// return(\r\n//     <MyPosts post={state.post} message={props.store.getState().message} addChangePost={addChangePost} onPostChange={onPostChange} />\r\n// )\r\n//\r\n// }","import React, {ChangeEvent} from 'react';\r\nimport cl from'./css/Profile.module.css';\r\nimport ProfileInfo from './TemplateProfile/ProfileInfo/ProfileInfo';\r\nimport mainImage from '../assets/img/baner1.png';\r\nimport MyPostsWrap from \"./TemplateProfile/MyPosts/MyPostsWrap\";\r\nimport {AxiosGetType} from \"./ProfileWrap\";\r\nimport {ProfileStatus} from \"./TemplateProfile/ProfileInfo/ProfileStatus\";\r\n\r\nexport type ProfilePropsType = {\r\n  profile:AxiosGetType\r\n    status:string\r\n  // addChangePost:()=>void\r\n  // changeNewPostText:(newText:string) => void\r\n  // dispatch:(action:dispatchActionType)=>void\r\n  //   store:any\r\n    updateUserStatusTC:(status:string)=>void\r\n    isOwner?:boolean\r\n    changePhoto :(photo:any)=>void\r\n    saveProfileTC :(data:any)=>void\r\n}\r\n\r\nconst Profile = (props: ProfilePropsType) => {\r\n  // debugger\r\n    return(\r\n      <section className = 'content'>\r\n        <div>\r\n          <div className = {cl.main__image}>\r\n            <img src={mainImage} className={cl.baner}/>\r\n          </div>\r\n            {/*<div>*/}\r\n            {/*    <ProfileStatus status={props.status} updateStatus={props.updateStatus}/>*/}\r\n            {/*</div>*/}\r\n          <ProfileInfo\r\n              profile={props.profile} status={props.status} updateStatus={props.updateUserStatusTC}\r\n              changePhoto={props.changePhoto} isOwner={props.isOwner} saveProfileTC={props.saveProfileTC}\r\n          />\r\n          <MyPostsWrap />\r\n        </div>\r\n      </section>\r\n    );\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport Profile from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/ReduxStore\";\r\nimport {\r\n    changePhotoTC,\r\n    getUserProfileTC,\r\n    getUserStatusTC,\r\n    saveProfileTC,\r\n    updateUserStatusTC\r\n} from \"../redux/ProfileReducer\";\r\nimport {withRouter, RouteComponentProps} from 'react-router-dom';\r\nimport {compose} from \"redux\";\r\nimport {IsLoginRedirect} from '../common/lsLoginHOC';\r\n\r\nexport type propsType = {\r\n    profile: AxiosGetType\r\n    getUserProfileTC: (userID: string) => void\r\n    getUserStatusTC: (userID: string) => void\r\n    updateUserStatusTC: (status: string) => void\r\n    saveProfileTC: (data: any) => void\r\n    changePhotoTC: (file: any) => void\r\n    status: string\r\n    authorizedUserID: string\r\n}\r\ntype TRouteParams = {\r\n    userID: string // since it route params\r\n}\r\nexport type AxiosGetType = {\r\n    userId: number\r\n    lookingForAJob: boolean\r\n    lookingForAJobDescription: string\r\n    fullName: string\r\n    contacts: contactsType\r\n    photos: photosType\r\n}\r\nexport type contactsType = {\r\n    github: string\r\n    vk: string\r\n    facebook: string\r\n    instagram: string\r\n    twitter: string\r\n    website: string\r\n    youtube: string\r\n    mainLink: string\r\n}\r\nexport type photosType = {\r\n    small: string\r\n    large: string\r\n}\r\n\r\nexport class ProfileWrap extends React.Component<propsType & RouteComponentProps<TRouteParams>> {\r\n    refreshProfile() {\r\n        let userID = this.props.match.params.userID;\r\n        if (!userID) {\r\n            userID = this.props.authorizedUserID;\r\n            //userID = '11446';\r\n            if (!userID) {\r\n                this.props.history.push('/login');\r\n            }\r\n        }\r\n        this.props.getUserProfileTC(userID);\r\n        this.props.getUserStatusTC(userID);\r\n    }\r\n    componentDidMount() {\r\n        this.refreshProfile()\r\n    }\r\n    componentDidUpdate(prevProps: Readonly<propsType & RouteComponentProps<TRouteParams>>, prevState: Readonly<{}>, snapshot?: any) {\r\n        if(this.props.match.params.userID !== prevProps.match.params.userID){\r\n            this.refreshProfile()\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                isOwner={!this.props.match.params.userID}\r\n                changePhoto={this.props.changePhotoTC}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateUserStatusTC={this.props.updateUserStatusTC}\r\n                saveProfileTC={this.props.saveProfileTC}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType) => {\r\n    return {\r\n        profile: state.profile.profile,\r\n        status: state.profile.status,\r\n        authorizedUserID: state.auth.id\r\n    }\r\n}\r\n// let withRouterProfileContainer = withRouter(ProfileWrap);\r\n// export default connect(mapStateToProps, {\r\n//     getUserProfileTC,\r\n//     getUserStatusTC,\r\n//     updateUserStatusTC\r\n// })(IsLoginRedirect(withRouterProfileContainer))\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        getUserProfileTC,\r\n        getUserStatusTC,\r\n        updateUserStatusTC,\r\n        changePhotoTC,\r\n        saveProfileTC,\r\n    }),\r\n    IsLoginRedirect,\r\n    withRouter\r\n)(ProfileWrap)\r\n"],"sourceRoot":""}