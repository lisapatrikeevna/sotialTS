{"version":3,"sources":["common/lsLoginHOC.tsx","assets/img/undraw_data_processing_yrrv.png","components/TemplateDialogs/UserDialogs/DialogData.tsx","components/TemplateDialogs/UserDialogs/MessagesItem.tsx","components/Dialogs.tsx","components/DialogsWrap.tsx"],"names":["mapStateToPropsForRedirect","state","aught","auth","IsLoginRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","DialogData","path","id","className","key","name","MessagesItem","message","Dialogs","dialogsElements","dialogs","dialogItem","map","d","messageElements","messageData","m","src","usersImg","DilogsReduxForm","onSubmit","value","sendMessageAC","maxLength","minLength","reduxForm","form","handleSubmit","Field","component","renderTextField","placeholder","label","multiline","rowsMax","variant","type","DialogsWrap"],"mappings":"8MA0CIA,EAA6B,SAACC,GAAD,MAA2B,CACxDC,MAAOD,EAAME,KAAKD,QAGRE,EAAmB,SAACC,GAAoB,IAE5CC,EAF2C,uKAIzC,OAAKC,KAAKC,MAAMN,MAET,kBAACG,EAAcE,KAAKC,OAFG,kBAAC,IAAD,CAAUC,GAAG,eAJF,GAEjBC,IAAML,WAUtC,OAFqCM,YAAQX,EAARW,CAAoCL,K,0CCxD7EM,EAAOC,QAAU,IAA0B,yD,oFCiB5BC,MATf,SAAqBN,GACjB,IAAIO,EAAO,WAAaP,EAAMQ,GAC9B,OACA,yBAAKC,UAAY,YAAYC,IAAKV,EAAMQ,IACpC,kBAAC,IAAD,CAASP,GAAIM,GAAb,IAAqBP,EAAMW,QCOpBC,MAPf,SAAuBZ,GACnB,OACI,yBAAKS,UAAY,iBACbT,EAAMa,U,qDCkDHC,EAhDC,SAACd,GAEb,IAAIe,EAAkBf,EAAMgB,QAAQC,WAAWC,KAAI,SAACC,GAAD,OAAO,kBAAC,EAAD,CAAYR,KAAMQ,EAAER,KAAMD,IAAKS,EAAEX,GAAIA,GAAIW,EAAEX,QACjGY,EAAkBpB,EAAMgB,QAAQK,YAAYH,KAAI,SAACI,GAAD,OAAO,kBAAC,EAAD,CAAcT,QAASS,EAAET,QAASH,IAAKY,EAAEd,GAC3BA,GAAIc,EAAEd,QAqB/E,OACI,6BAASC,UAAU,WACf,yBAAKA,UAAU,gBACX,yBAAKA,UAAU,aACX,yBAAKc,IAAKC,IAAUf,UAAU,UADlC,aAGc,6BACTM,IAGT,yBAAKN,UAAU,YACX,6BAAMW,GAMN,kBAACK,EAAD,CAAiBC,SAxBZ,SAACC,GAId3B,EAAM4B,cAAcD,EAAMd,eA8D5BY,GA/BcI,YAAU,IACXC,YAAU,GA8BLC,YAAwB,CAACC,KAAM,WAA/BD,EA7BsC,SAAC/B,GAC3D,OACI,0BAAMS,UAAU,cAAciB,SAAU1B,EAAMiC,cAC1C,4CACA,kBAACC,EAAA,EAAD,CAAOC,UAAWC,IAAiBC,YAAY,WACxC1B,KAAM,UACNH,GAAG,8BACH8B,MAAM,gBACNC,WAAS,EACTC,QAAS,EACTC,QAAQ,aAef,4BAAQhC,UAAU,aAAaiC,KAAM,UAArC,a,iBCxENC,EAAcxC,aANA,SAACV,GACjB,MAAM,CACFuB,QAAQvB,EAAMuB,WAI+E,CAACY,mBAAlFzB,CAAkGP,YAAgBkB,IAEvH6B","file":"static/js/5.157f4e7b.chunk.js","sourcesContent":["// import {Redirect} from \"react-router-dom\";\r\n// import React from \"react\";\r\n// import {InitialStateType} from \"../redux/AuthReducer\";\r\n// import {connect} from \"react-redux\";\r\n//\r\n// let mapStateToPropsRedirec = (state:InitialStateType)=>({\r\n//     aught: state.aught\r\n// })\r\n// export const IsLoginRedirect = (SomeComponent: any) => {\r\n//\r\n//     // return (props: any) => {\r\n//     //    //debugger\r\n//     //\r\n//     //     return <SomeComponent {...props}/>\r\n//     // }\r\n//     class RedirectComponent extends React.Component<any, any> {\r\n//         render() {\r\n//             if (!this.props.aught) return <Redirect to='login'/>\r\n//             return <SomeComponent {...this.props}/>\r\n//         }\r\n//     }\r\n//     // return RedirectComponent;\r\n//     let AughtRedirectComponent= connect(mapStateToPropsRedirec)(RedirectComponent)\r\n//     return AughtRedirectComponent;\r\n//\r\n// }\r\n// {!props.aught ? <Redirect to='login'/> :\r\n//     <SomeComponent {...props}/>\r\n// }\r\n// !props.aught &&<> <Redirect to='login'/></>\r\n// const aught =useSelector<RootStateType,boolean>(state=>state.auth.aught)\r\n// if (!props.aught) { return <Redirect to='login'/> }\r\n\r\n\r\n\r\n\r\n\r\nimport React from \"react\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {connect} from \"react-redux\";\r\nimport { RootStateType } from \"../redux/ReduxStore\";\r\n\r\nlet mapStateToPropsForRedirect = (state: RootStateType) => ({\r\n    aught: state.auth.aught\r\n});\r\n\r\nexport const  IsLoginRedirect  = (Component: any) => {\r\n\r\n    class RedirectComponent extends React.Component <any>{\r\n        render() {\r\n            if (!this.props.aught) return <Redirect to='/login' />\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedAuthRedirectComponent;\r\n\r\n}\r\n\r\n\r\n// import { Redirect } from \"react-router-dom\";\r\n// import React from \"react\";\r\n//\r\n// export const IsLoginRedirect = (SomeComponent:any)=>{\r\n//     debugger\r\n//     return(props:any)=>{\r\n//         return<>\r\n//         if(!props.aught)<Redirect to='login'/>\r\n//             <SomeComponent {...props}/>\r\n//         </>\r\n//     }\r\n// }\r\n","module.exports = __webpack_public_path__ + \"static/media/undraw_data_processing_yrrv.ce1bbad0.png\";","import React from 'react';\r\nimport  cl from \"./DialogData.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\nexport type DialogsDataPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\nfunction DialogData (props: DialogsDataPropsType){ \r\n    let path = \"/dialog/\" + props.id;\r\n    return(\r\n    <div className = 'user-name' key={props.id}>\r\n        <NavLink to={path}> {props.name}</NavLink>\r\n    </div>\r\n)}\r\n\r\n\r\nexport default DialogData;","import React from 'react';\r\nimport cl from  \"./MessagesItem.module.css\";\r\n\r\n// const  MessagesItem = (props) => {\r\n//     return(\r\n//     <div className = 'message__item'>{props.message}</div>\r\n//     )\r\n// }\r\nexport type messagesItemType = {\r\n    message: string\r\n    id : number\r\n}\r\nfunction MessagesItem (props:messagesItemType){ \r\n    return(\r\n        <div className = 'messages-item'>\r\n           {props.message}\r\n        </div>\r\n)}\r\n\r\nexport default MessagesItem;","import React, {ChangeEvent} from 'react';\nimport \"./css/Dialogs.css\";\nimport {dialogsInitialStateType} from '../redux/DialogReducer';\nimport DialogData from './TemplateDialogs/UserDialogs/DialogData';\nimport MessagesItem from './TemplateDialogs/UserDialogs/MessagesItem';\nimport usersImg from '../assets/img/undraw_data_processing_yrrv.png';\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\nimport {maxLength, minLength, requiredFields} from \"../expansive/validate\";\nimport {renderTextField, Textarea} from \"../common/FormControl/FormControl\";\n\n\nexport type DialogsPropsType = {\n    dialogs: dialogsInitialStateType\n    // message: string\n    sendMessageAC: (value: string) => void\n    // changeNewMessage: (someText: string) => void\n}\nconst Dialogs = (props: DialogsPropsType) => {\n\n    let dialogsElements = props.dialogs.dialogItem.map((d) => <DialogData name={d.name} key={d.id} id={d.id}/>);\n    let messageElements = props.dialogs.messageData.map((m) => <MessagesItem message={m.message} key={m.id}\n                                                                             id={m.id}/>);\n\n// let addSendMessage = () => {\n//     // if (dialogMessage.current?.value !== null){\n//     //     props.sendMessage(dialogMessage.current?.value);\n//     // }\n//     //props.sendMessage();\n// }\n//\n// let dialogMessage = (e: ChangeEvent<HTMLTextAreaElement>) => {\n//     // let message= e.currentTarget.value;\n//     props.changeNewMessage(e.currentTarget.value);\n//     //   props.dispatch(changeMessageActionCreator(message))\n// }\n    const onSubmit = (value: FormDataType) => {\n        debugger\n        // console.log(value)\n        //alert(value.message)\n        props.sendMessageAC(value.message);\n    }\n\n    return (\n        <section className='dialogs'>\n            <div className='users__wrepp'>\n                <div className='user-name'>\n                    <img src={usersImg} className=\"users\"/>\n                    {/* <NavLink to={path}> {props.name}{props.src} </NavLink> */}\n                    user name:<br/>\n                    {dialogsElements}\n                </div>\n            </div>\n            <div className='messages'>\n                <div>{messageElements}</div>\n                {/*<div className= 'new-message'>*/}\n                {/*    <p>wright message</p>*/}\n                {/*    <textarea placeholder=\"let text\" value={props.message} onChange={dialogMessage}></textarea>*/}\n                {/*    <button  className='newMessage' onClick={addSendMessage}>send</button>*/}\n                {/*</div>*/}\n                <DilogsReduxForm onSubmit={onSubmit}/>\n            </div>\n        </section>\n    );\n\n}\nexport default Dialogs;\n\ntype  FormDataType = {\n    message: string\n}\nconst maxLength20 = maxLength(20)\nconst minLength1 = minLength(1)\nconst DilogsForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\n    return (\n        <form className='new-message' onSubmit={props.handleSubmit}>\n            <p>write message</p>\n            <Field component={renderTextField} placeholder='let text'\n                   name={'message'}\n                   id=\"outlined-multiline-flexible\"\n                   label=\"you`r message\"\n                   multiline\n                   rowsMax={4}\n                   variant=\"outlined\"\n            />\n            {/*<Field component={Textarea} placeholder='let text'*/}\n            {/*       name={'message'}*/}\n            {/*      validate={[requiredFields,maxLength20,minLength1]}*/}\n            {/*/>*/}\n\n            {/*<TextField placeholder='let text'*/}\n            {/*           name={'message'}*/}\n            {/*           id=\"outlined-multiline-flexible\"*/}\n            {/*           label=\"Multiline\"*/}\n            {/*           multiline*/}\n            {/*           rowsMax={4}*/}\n            {/*           variant=\"outlined\"*/}\n            {/*/>*/}\n            <button className='newMessage' type={'submit'}>send</button>\n        </form>\n    )\n}\nconst DilogsReduxForm = reduxForm<FormDataType>({form: 'dialogs'})(DilogsForm);","import React from 'react';\nimport \"./css/Dialogs.css\";\nimport {dialogsInitialStateType, dialogsItemType, sendMessageAC} from '../redux/DialogReducer';\nimport {RootStateType} from \"../redux/ReduxStore\";\nimport Dialogs from \"./Dialogs\";\nimport {connect} from \"react-redux\";\nimport {IsLoginRedirect} from \"../common/lsLoginHOC\";\nimport {messagesItemType} from \"./TemplateDialogs/UserDialogs/MessagesItem\";\n\n\ntype mapStatePropsType={\n    // dialogs:Array<dialogsItemType>&Array<messagesItemType>\n    dialogs: dialogsInitialStateType\n}\ntype mapDispatchPropsType={\n    sendMessageAC  : (value:string) =>void\n   // changeNewMessage:(value:string) =>void\n}\n\nlet mapStateToProps=(state:RootStateType):mapStatePropsType=>{\n    return{\n        dialogs:state.dialogs,\n       //message:state.dialogs.\n    }\n}\nconst DialogsWrap = connect<mapStatePropsType,mapDispatchPropsType,{},RootStateType>(mapStateToProps,{sendMessageAC})(IsLoginRedirect(Dialogs));\n\nexport default DialogsWrap;"],"sourceRoot":""}