{"version":3,"sources":["components/css/login.module.css","App.module.css","components/css/Footer.module.css","redux/ProfileReducer.ts","redux/UsersReducer.ts","expansive/validate.tsx","common/Preloader.tsx","redux/DialogReducer.ts","assets/img/undraw_video_upload_3d4u.png","assets/img/undraw_experience_design_eq3j.png","assets/img/undraw_online_popularity_elhc.png","assets/img/undraw_design_team_af2y.png","assets/img/undraw_good_team_m7uu.png","assets/img/undraw_online_test_gba7.png","assets/img/undraw_reminder_pa79.png","assets/img/undraw_mobile_web_2g8b.png","assets/img/search.png","assets/img/806.gif","common/commonCl.module.css","assets/img/bg/bg1.jpeg","assets/img/bg/bg2.jpg","assets/img/bg/bg3.jpg","assets/img/bg/bg4.jpg","assets/img/bg/red.jpg","assets/img/bg/blue.jpg","assets/img/bg/light.jpg","assets/img/bg/dark.jpg","common/AsksApi.ts","serviceWorker.ts","redux/AuthReducer.ts","redux/AppReducer.ts","redux/ReduxStore.ts","components/Footer.tsx","components/Navbar.tsx","components/Header.tsx","components/HeaderWrap.tsx","components/Login.tsx","components/LoginWrap.tsx","components/TemplateSettings/BackgroundChange.tsx","components/TemplateSettings/ThemeChange.tsx","components/Settings.tsx","App.tsx","index.tsx","components/css/Navbar.module.css","components/TemplateSettings/ThemeChange.module.css","components/TemplateSettings/BackgroundChange.module.css","components/css/Header.module.css","common/FormControl/FormControl.tsx"],"names":["module","exports","initialState","messageForNewPost","posts","id","message","likesCount","profile","status","AddChangePostAC","value","type","profileReducer","state","action","newPost","Date","getTime","newListPost","filter","p","photos","getUserProfileTC","userID","dispatch","ProfileUserApi","getUser","then","response","data","getUserStatusTC","userId","getStatus","updateUserStatusTC","updateStatus","resultCode","updateUserStatus","changePhotoTC","file","a","updateUserPhoto","res","saveProfileTC","getState","auth","saveProfile","toString","console","log","stopSubmit","_error","messages","users","pagesSize","currentPage","countUsers","isFetching","followingIsProgress","setCurrentPageAC","isFetchingAC","followingIsProgressAC","getUsersTC","UserApi","getUsers","items","totalCount","onFollowTC","FollowUserApi","follow","onUnFollowTC","unfollow","usersReducer","map","u","followed","maxLength","max","length","undefined","minLength","min","validate","values","errors","forEach","field","email","test","Preloader","className","cl","owerleyPreloader","src","preloader","dialogItem","name","messageData","sendMessageAC","dialogReducer","newText","instans","axios","create","withCredentials","baseURL","headers","get","AuthMyApi","getMy","login","password","rememberMe","post","logout","delete","formData","FormData","append","put","Boolean","window","location","hostname","match","avatar","aught","setAuthMyAC","setAuthMyTC","authReducer","ava","initial","bgBody","theme","BackgroundChangeAC","ThemeChangeAC","appReducer","reducers","combineReducers","dialogs","form","formReducer","app","store","createStore","applyMiddleware","thunkMiddleware","Footer","useSelector","footer","style","footerWrap","Navbar","menu","menuItem","alt","to","active","news","music","settings","Header","props","header","href","logo","wrap","btnImg","dFlex","small","defoultAva","onClick","logOutTC","HeaderWrap","this","React","Component","connect","LoginReduxForm","reduxForm","onSubmit","handleSubmit","loginForm","Field","placeholder","component","renderTextField","label","variant","input","borderColor","renderCheckbox","error","errorForm","Login","loginTC","LoginWrap","BackgroundChange","useDispatch","example","bgGray","key","bgCrazy","bgGrin","bgRain","bg","img","localStorage","setItem","removeItem","ThemeChange","preview","dark","light","blue","red","Settings","clear","News","lazy","Music","DialogsWrap","UsersWrap","ProfileWrap","App","setInitialTC","getItem","bgName","stule","appWrapper","Suspense","fallback","wrappContent","path","render","compose","withRouter","promise","Promise","all","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","CssTextField","withStyles","root","color","background","borderBottomColor","TextField","meta","touched","invalid","custom","helperText","control","checked","onChange"],"mappings":"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","file":"static/js/main.ec79ad2e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"d-flex\":\"login_d-flex__2I7at\",\"errorForm\":\"login_errorForm__dnkWl\",\"input\":\"login_input__3qjfN\",\"loginForm\":\"login_loginForm__1ypF4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"poolRight\":\"App_poolRight__2fKpE\",\"poolLeft\":\"App_poolLeft__HBsvf\",\"appWrapper\":\"App_appWrapper__1G2jL\",\"wrappContent\":\"App_wrappContent__2rab9\",\"appWrapperContent\":\"App_appWrapperContent__2H021\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__3a01H\"};","import {ProfileUserApi} from \"../common/AsksApi\";\r\nimport {Dispatch, Reducer} from \"redux\";\r\nimport {AxiosGetType, photosType} from \"../components/ProfileWrap\";\r\nimport {RootStateType} from \"./ReduxStore\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\ntype AddChangePostActionType = ReturnType<typeof AddChangePostAC>\r\n// type ChangeNewPostTextActionType = ReturnType<typeof OnPostChangeActionCreator>\r\ntype setUserProfile = ReturnType<typeof setUserProfile>\r\ntype setUserStatus = ReturnType<typeof setUserStatus>\r\ntype DeletePostType = ReturnType<typeof DeletePostAC>\r\ntype changePhotoSuccessACType = ReturnType<typeof changePhotoSuccessAC>\r\n\r\ntype dispatchActionType = AddChangePostActionType | setUserProfile | setUserStatus |\r\n    DeletePostType | changePhotoSuccessACType\r\n\r\n\r\ntype profileInitialStateType = {\r\n    messageForNewPost: string;\r\n    posts: Array<postType>\r\n    //messageForNewPost: string\r\n    profile: any\r\n    //profile: number | null\r\n    status: string\r\n}\r\nexport type postType = {\r\n    id: number\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nlet initialState: profileInitialStateType = {\r\n    messageForNewPost: '',\r\n    posts: [\r\n        {id: 1, message: \"some text\", likesCount: 23},\r\n        {id: 2, message: \"here you goo\", likesCount: 3},\r\n        {id: 3, message: \"let`s goo bebe\", likesCount: 2}\r\n    ],\r\n    profile: null,\r\n    status: ''\r\n}\r\n\r\nconst ADD_CHANGE_POST = \"ADD-CHANGE-POST\";\r\n// const CHANGE_NEW_POST_TEXT = \"CHANGE-NEW-POST-TEXT\";\r\nconst SET_USER_PROFILE = \"SET_USER_PROFILE\";\r\nconst SET_STATUS = \"SET_STATUS\";\r\nconst SET_NEW_PHOTO = \"SET_NEW_PHOTO\";\r\n\r\nconst profileReducer: Reducer<profileInitialStateType, dispatchActionType> = (state = initialState, action): profileInitialStateType => {\r\n    switch (action.type) {\r\n        case ADD_CHANGE_POST:\r\n            const newPost: postType = {\r\n                id: new Date().getTime(),\r\n                likesCount: 0,\r\n                message: action.value\r\n            }\r\n            return {\r\n                ...state,\r\n                // messageForNewPost: '',\r\n                posts: [...state.posts, newPost]\r\n            };\r\n        case \"DELETE_POST\":\r\n            let newListPost = state.posts.filter(p => p.id !== action.id)\r\n            return {\r\n                ...state,\r\n                posts: newListPost\r\n            };\r\n        case SET_USER_PROFILE:\r\n            return {\r\n                ...state,\r\n                profile: action.profile\r\n            };\r\n        case SET_STATUS:\r\n            return {\r\n                ...state,\r\n                status: action.status\r\n            };\r\n        case SET_NEW_PHOTO:\r\n            debugger\r\n            return {\r\n                ...state, profile: {...state.profile, photos: action.photos}\r\n            };\r\n\r\n        default :\r\n            return state;\r\n    }\r\n}\r\nexport const AddChangePostAC = (value: string) => ({type: ADD_CHANGE_POST, value} as const)\r\nexport const DeletePostAC = (id: number) => ({type: \"DELETE_POST\", id} as const)\r\n// export const OnPostChangeActionCreator = (newText: string) => ({type: CHANGE_NEW_POST_TEXT, message: newText} as const)\r\nexport const setUserProfile = (profile: number) => ({type: SET_USER_PROFILE, profile} as const)\r\nexport const setUserStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const updateUserStatus = (status: string) => ({type: SET_STATUS, status} as const)\r\nexport const changePhotoSuccessAC = (photos: photosType) => ({type: SET_NEW_PHOTO, photos} as const)\r\nexport default profileReducer;\r\n\r\nexport const getUserProfileTC = (userID: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        ProfileUserApi.getUser(+userID)\r\n            .then(response => {\r\n                // this.props.toggleIsFetching(false)\r\n                dispatch(setUserProfile(response.data));\r\n            });\r\n    }\r\n}\r\nexport const getUserStatusTC = (userId: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        ProfileUserApi.getStatus(+userId)\r\n            .then(response => {\r\n                dispatch(setUserStatus(response.data));\r\n            });\r\n    }\r\n}\r\nexport const updateUserStatusTC = (status: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        ProfileUserApi.updateStatus(status)\r\n            .then(response => {\r\n                if (response.data.resultCode === 0) {\r\n                    dispatch(updateUserStatus(status));\r\n                }\r\n            });\r\n    }\r\n}\r\nexport const changePhotoTC = (file: any) => async (dispatch: Dispatch) => {\r\n    let res = await ProfileUserApi.updateUserPhoto(file)\r\n    if (res.data.resultCode === 0) {\r\n        // debugger\r\n        dispatch(changePhotoSuccessAC(res.data.data.photos));\r\n    }\r\n}\r\nexport const saveProfileTC = (profile: AxiosGetType) => async (dispatch: Dispatch<any>, getState:()=>RootStateType) => {\r\n\r\n   const id = getState().auth.id\r\n    const res = await ProfileUserApi.saveProfile(profile)\r\n    debugger\r\n    if (res.data.resultCode === 0) {\r\n        if (id!==null){\r\n            dispatch(getUserProfileTC(id.toString()))\r\n        }\r\n        console.log(res);\r\n    }else {\r\n        dispatch(stopSubmit('IsOwner',{_error: res.data.messages[0]}))\r\n    }\r\n}\r\n\r\n","import {FollowUserApi, UserApi} from \"../common/AsksApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {mappedObj} from \"../expansive/mappedObj\";\r\n\r\ntype UnfollowACType = ReturnType<typeof unfollowAC>\r\ntype FollowACType = ReturnType<typeof followAC>\r\ntype SetUsersACType = ReturnType<typeof setUsersAC>\r\ntype SetCurrentPageACType = ReturnType<typeof setCurrentPageAC>\r\ntype SetTotalUsersACType = ReturnType<typeof setTotalUsersAC>\r\ntype IsFetchingACType = ReturnType<typeof isFetchingAC>\r\ntype follovinIsProgresACType = ReturnType<typeof followingIsProgressAC>\r\ntype UsersActionType =  UnfollowACType | FollowACType\r\n    | SetUsersACType | SetCurrentPageACType | SetTotalUsersACType\r\n    | IsFetchingACType | follovinIsProgresACType\r\nexport type usersInitialStateType = {\r\n    users: Array<userItemType>\r\n    pagesSize: number\r\n    currentPage: number\r\n    countUsers: number\r\n    isFetching: boolean\r\n    followingIsProgress: number[]\r\n}\r\nexport type userItemType = {\r\n    name: string\r\n    id: number\r\n    status: string\r\n    followed: boolean\r\n    photos: photoType\r\n    uniqueUrlName: null\r\n\r\n}\r\ntype  photoType = {\r\n    small: string\r\n    large: string\r\n}\r\nlet initialState: usersInitialStateType = {\r\n    users: [],\r\n    pagesSize: 7,\r\n    currentPage: 1,\r\n    countUsers: 10,\r\n    isFetching: false,\r\n    followingIsProgress: []\r\n}\r\n\r\nconst usersReducer = (state: usersInitialStateType = initialState, action: UsersActionType): usersInitialStateType => {\r\n    switch (action.type) {\r\n        case 'FOLLOW':\r\n            return {\r\n                ...state,\r\n                //@ts-ignore\r\n                users:\r\n                //    mappedObj(state.users,action.userId,'id',{ followed: true})\r\n                    state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: true}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'UNFOLLOW':\r\n            return {\r\n                ...state,\r\n                users: state.users.map(u => {\r\n                    if (u.id === action.userId) {\r\n                        return {...u, followed: false}\r\n                    }\r\n                    return u;\r\n                })\r\n            }\r\n        case 'SET-USERS' : {\r\n            // return {...state, users:[ ...state.users, ...action.users]}\r\n            return {...state, users: action.users}\r\n        }\r\n        case 'SET-CURRENT-PAGE': {\r\n            return {...state, currentPage: action.currentPage}\r\n        }\r\n        case 'SET-TOTAL-COUNT': {\r\n            return {...state, countUsers: action.totalCount}\r\n        }\r\n        case 'TOGGLE-IS-FETHING': {\r\n            return {...state, isFetching: action.isFetching}\r\n        }\r\n        case 'FOLOVING-IS-PROGRES': {\r\n            return {\r\n                ...state,\r\n                followingIsProgress: action.followingIsProgress\r\n                    ? [...state.followingIsProgress, action.id]\r\n                    : state.followingIsProgress.filter(id => id !== action.id)\r\n            }\r\n        }\r\n        default  :\r\n            return state;\r\n    }\r\n}\r\n\r\n\r\nexport const followAC = (userId: number) => ({type: 'FOLLOW', userId} as const)\r\nexport const unfollowAC = (userId: number) => ({type: 'UNFOLLOW', userId} as const)\r\nexport const setUsersAC = (users: Array<userItemType>) => ({type: 'SET-USERS', users: users} as const)\r\nexport const setCurrentPageAC = (currentPage: number) => ({type: 'SET-CURRENT-PAGE', currentPage} as const)\r\nexport const setTotalUsersAC = (totalCount: number) => ({type: 'SET-TOTAL-COUNT', totalCount} as const)\r\nexport const isFetchingAC = (isFetching: boolean) => ({type: 'TOGGLE-IS-FETHING', isFetching} as const)\r\nexport const followingIsProgressAC = (followingIsProgress: boolean, id: number) => ({\r\n    type: 'FOLOVING-IS-PROGRES', followingIsProgress, id} as const)\r\n\r\n//type Dispatch<S> = Redux.Dispatch<S>;\r\nexport const getUsersTC = (currentPage: number, pagesSize: number) => async (dispatch: Dispatch) => {\r\n    dispatch(isFetchingAC(true))\r\n    dispatch(setCurrentPageAC(currentPage))\r\n    const response = await UserApi.getUsers(currentPage, pagesSize)\r\n\r\n    dispatch(isFetchingAC(false));\r\n    dispatch(setUsersAC(response.items));\r\n    dispatch(setTotalUsersAC(response.totalCount));\r\n\r\n}\r\n\r\nexport const onFollowTC = (id: number) => async (dispatch: Dispatch) => {\r\n    dispatch(followingIsProgressAC(true, id))\r\n    const response = await FollowUserApi.follow(id)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(followAC(id))\r\n    }\r\n    dispatch(followingIsProgressAC(false, id))\r\n}\r\n\r\nexport const onUnFollowTC = (id: number) => async (dispatch: Dispatch) => {\r\n    dispatch(followingIsProgressAC(true, id))\r\n    const response = await FollowUserApi.unfollow(id)\r\n    if (response.data.resultCode === 0) {\r\n        dispatch(unfollowAC(id))\r\n    }\r\n    dispatch(followingIsProgressAC(false, id))\r\n}\r\n\r\n\r\nexport default usersReducer;\r\n","import React from \"react\";\r\n\r\nexport const requiredFields = (value: string) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required!'\r\n}\r\nexport const maxLength = (max: number) => (value: string) => {\r\n    return value && value.length > max ? `Must be ${max} characters or less` : undefined\r\n}\r\n\r\nexport const minLength = (min: number) => (value: string) =>\r\n    value && value.length < min ? `Must be ${min} characters or more` : undefined\r\n\r\nexport const required = (value: string) => (value || typeof value === 'number' ? undefined : 'Required')\r\n\r\nexport const validate = (values: any) => {\r\n    const errors:any = {}\r\n    const requiredFields:Array<string> = [\r\n        'login',\r\n        'password',\r\n        'email',\r\n    ]\r\n    requiredFields.forEach(field => {\r\n        //debugger\r\n        if (!values[field]) {\r\n            errors[field] = 'Required'\r\n        }\r\n    })\r\n    if (values.email &&\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email) ) {\r\n        errors.email = 'Invalid email address'\r\n    }\r\n    return errors\r\n}\r\n\r\n//https://redux-form.com/8.3.0/examples/fieldlevelvalidation/","import React from \"react\";\r\nimport preloader from \"../assets/img/806.gif\";\r\nimport cl from './commonCl.module.css'\r\n\r\nexport const Preloader =()=>{\r\n    return<div className={cl.owerleyPreloader}>\r\n        <img src={preloader}/>\r\n    </div>\r\n}","type SendMessageAType = ReturnType<typeof sendMessageAC>\r\n// type ChangeNewMessageAType = ReturnType<typeof changeNewMessage>\r\ntype dialogsActionType = SendMessageAType;\r\ntype messagesItemType = {\r\n    message: string\r\n    id : number\r\n}\r\nexport type dialogsItemType = {\r\n    name: string\r\n    id : number\r\n}\r\nexport type dialogsInitialStateType = {\r\n    dialogItem:Array<dialogsItemType>\r\n    messageData: Array<messagesItemType>\r\n}\r\n\r\nlet initialState:dialogsInitialStateType={\r\n    dialogItem: [\r\n        {name: \"lisa\", id: 1},\r\n        {name: \"Dan\" , id: 2 },\r\n        {name: \"Kat\" , id: 3}\r\n    ] ,\r\n    messageData: [\r\n        {id: 1, message: 'ok'},\r\n        {id: 2, message: 'to doms'},\r\n        {id: 3, message: 'hire you go!'}\r\n    ],\r\n   // messageForNewDialog: '',\r\n}\r\nconst SEND_MESSAGE = \"SEND-MESSAGE\";\r\n// const CHANGE_NEW_MESSAGE = \"CHANGE-NEW-MESSAGE\";\r\nconst dialogReducer = ( state:dialogsInitialStateType=initialState, action:dialogsActionType) => {\r\n   switch (action.type) {\r\n       case SEND_MESSAGE: {\r\n           // debugger\r\n           const newText: messagesItemType = {\r\n               id: new Date().getTime(),\r\n               message:  action.value\r\n           }\r\n           return {\r\n               ...state,\r\n                messageData: [...state.messageData,newText]\r\n           }\r\n          // debugger\r\n       }\r\n       //\r\n       // case CHANGE_NEW_MESSAGE:\r\n       //     // debugger\r\n       //     return {\r\n       //         ...state,\r\n       //         messageForNewDialog : action.newText,\r\n       //     }\r\n\r\n       default  :\r\n           return state;\r\n   }\r\n\r\n}\r\nexport const sendMessageAC = (value:string) => ({type:SEND_MESSAGE,value} as const)\r\n\r\n\r\nexport default dialogReducer;","module.exports = __webpack_public_path__ + \"static/media/undraw_video_upload_3d4u.e2f70a4d.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_experience_design_eq3j.855d21ab.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_online_popularity_elhc.3522b75d.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_design_team_af2y.05f76990.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_good_team_m7uu.11abe06a.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_online_test_gba7.24b9c595.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_reminder_pa79.c2e88523.png\";","module.exports = __webpack_public_path__ + \"static/media/undraw_mobile_web_2g8b.c7b1f90f.png\";","module.exports = __webpack_public_path__ + \"static/media/search.25194156.png\";","module.exports = __webpack_public_path__ + \"static/media/806.58f75676.gif\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dFlex\":\"commonCl_dFlex__xXw_g\",\"owerleyPreloader\":\"commonCl_owerleyPreloader__3wPDF\"};","module.exports = __webpack_public_path__ + \"static/media/bg1.fa1cca2c.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/bg2.f5155bff.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg3.85a01a6e.jpg\";","module.exports = __webpack_public_path__ + \"static/media/bg4.e60b3bce.jpg\";","module.exports = __webpack_public_path__ + \"static/media/red.df029ff1.jpg\";","module.exports = __webpack_public_path__ + \"static/media/blue.0e8d99a0.jpg\";","module.exports = __webpack_public_path__ + \"static/media/light.75cb4506.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dark.2eabbef1.jpg\";","import axios from \"axios\";\r\nimport {AxiosGetType} from \"../components/ProfileWrap\";\r\n\r\ntype MyResType={\r\n    data:{id:number,email:string,login:string}\r\n    resultCode:number\r\n    message:Array<string>\r\n}\r\nconst instans = axios.create({\r\n    withCredentials: true,\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n    headers: {\r\n        'API-KEY': '40979d82-3c32-4398-abbe-81041d6b3ea6'\r\n    }\r\n})\r\nexport const UserApi = {\r\n    getUsers(currentPage = 1, pagesSize = 10) {\r\n        // debugger\r\n        return instans.get(`users?page=${currentPage}&count=${pagesSize}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    }\r\n}\r\nexport const AuthMyApi = {\r\n    getMy() {\r\n        return instans.get<MyResType>(`auth/me`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    login(email: string, password: string, rememberMe=true) {\r\n        return instans.post(`auth/login`, {email, password, rememberMe})\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    logout(){\r\n        return instans.delete(`auth/login`).then(response=>{\r\n            return response.data\r\n        })\r\n    }\r\n}\r\nexport const FollowUserApi = {\r\n    getUser(userId: number) {\r\n        return instans.get(`follow/${userId}`)\r\n            .then(response => {\r\n                return response.data\r\n            })\r\n    },\r\n    unfollow(userId: number) {\r\n        return instans.delete(`follow/${userId}`)\r\n    },\r\n    follow(userId: number) {\r\n        return instans.post(`follow/${userId}`)\r\n    },\r\n}\r\nexport const ProfileUserApi = {\r\n    getUser(userId: number) {\r\n        return instans.get(`profile/${userId}`)\r\n    },\r\n    updateUserPhoto(file:any) {\r\n        const formData = new FormData()\r\n        formData.append('image',file)\r\n        return instans.put(`profile/photo`,formData, {headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n            }})\r\n    },\r\n    saveProfile(profile:any) {\r\n        return instans.put(`profile`,profile)\r\n    },\r\n    updateStatus(status: string) {\r\n        return instans.put(`profile/status`, {status: status})\r\n    },\r\n    getStatus(userId: number) {\r\n        return instans.get(`profile/status/${userId}`)\r\n    }\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {photosType} from \"../components/ProfileWrap\";\r\nimport {AuthMyApi, ProfileUserApi} from \"../common/AsksApi\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setUserProfile} from \"./ProfileReducer\";\r\nimport {stopSubmit} from \"redux-form\";\r\n\r\ntype setAuthMyACType = ReturnType<typeof setAuthMyAC>\r\ntype getAvatarACType = ReturnType<typeof getAvatarAC>\r\ntype ActionType = setAuthMyACType | getAvatarACType;\r\nexport type InitialStateType = {\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    avatar: photosType | null\r\n    aught: boolean\r\n    captchaUrl?: string | null\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    id: null,\r\n    email: null,\r\n    login: null,\r\n    avatar: null,\r\n    aught: false\r\n}\r\nconst authReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-AUTH-MY': {\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                ...action.data,\r\n            //    aught: true\r\n            }\r\n        }\r\n        case 'SET-AVA': {\r\n            return {\r\n                ...state,\r\n                avatar: action.ava\r\n            }\r\n        }\r\n        default  :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setAuthMyAC = (id: number | null, email: string | null, login: string | null,aught:boolean) => ({\r\n    type: 'SET-AUTH-MY', data: {id, email, login,aught}\r\n} as const)\r\nexport const getCaptchaUrlSuccessAC = (payload:{captchaUrl:string}) => ({type: 'GET-CAPTCHA-URL-SUCCESS', payload} as const)\r\n\r\nconst getAvatarAC = (id: number, ava: any,) => ({type: 'SET-AVA', id, ava} as const)\r\nexport const setAuthMyTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthMyApi.getMy()\r\n            .then(response => {\r\n                if (response.resultCode === 0) {\r\n                    let {id, email, login} = response.data\r\n                    dispatch(setAuthMyAC(id, email, login,true))\r\n                    // ProfileUserApi.getUser(id)\r\n                    //     .then(response=>{\r\n                    //             dispatch(setUserProfile(response.data.photos));\r\n                    //\r\n                    //         }\r\n                    //     )\r\n                }\r\n            });\r\n\r\n    }\r\n}\r\nexport const loginTC = (email: string, password: string, rememberMe: boolean) => {\r\n    return (dispatch: Dispatch<any>) => {\r\n        AuthMyApi.login(email, password, rememberMe)\r\n            .then(response => {\r\n                if (response.resultCode === 0) {\r\n                    dispatch(setAuthMyTC())\r\n                }else{\r\n                   // console.log(response.messages);\r\n                    dispatch(stopSubmit('login',{ _error:response.messages}))\r\n                }\r\n            })\r\n    }\r\n}\r\nexport const logOutTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        AuthMyApi.logout().then(response => {\r\n            if (response.resultCode === 0) {\r\n              //  console.log(response.data)\r\n               dispatch(setAuthMyAC(null, null, null,false))\r\n            }\r\n        })\r\n    }\r\n}\r\nexport default authReducer;\r\n","import {Dispatch} from \"redux\";\r\nimport {setAuthMyTC} from \"./AuthReducer\";\r\n\r\ntype setInitialACACType = ReturnType<typeof setInitialAC>\r\ntype BackgroundChangeACType = ReturnType<typeof BackgroundChangeAC>\r\ntype ThemeChangeACType = ReturnType<typeof ThemeChangeAC>\r\ntype DeleteSettingsThemeACType = ReturnType<typeof DeleteSettingsThemeAC>\r\ntype DeleteSettingsImgACType = ReturnType<typeof DeleteSettingsImgAC>\r\ntype DeleteOllSettingsACType = ReturnType<typeof DeleteOllSettingsAC>\r\ntype ActionType = setInitialACACType | BackgroundChangeACType | ThemeChangeACType|DeleteOllSettingsACType|DeleteSettingsImgACType|DeleteSettingsThemeACType;\r\nexport type themType = 'dark' | 'light' | 'blue' | 'red' | '';\r\nexport type InitialStateType = {\r\n    initial: boolean\r\n    bgBody: string\r\n    theme: themType\r\n}\r\n\r\nlet initialState: InitialStateType = {\r\n    initial: false,\r\n    bgBody: '',\r\n    theme : '',\r\n}\r\nconst appReducer = (state: InitialStateType = initialState, action: ActionType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SET-INITIAL': {\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                initial: true,\r\n            }\r\n        }\r\n        case 'SET-BACKGROUND': {\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                bgBody: action.name\r\n            }\r\n        }\r\n        case 'SET-THEME': {\r\n            // debugger\r\n            return {\r\n                ...state,\r\n                theme: action.name\r\n            }\r\n        }\r\n        case 'DELETE-OLL-SETTINGS':\r\n            return {\r\n                ...state,\r\n                theme: '',\r\n                bgBody: ''\r\n            }\r\n        case 'DELETE-THEME-SETTINGS':\r\n            return {\r\n                ...state,\r\n                theme: '',\r\n            }\r\n        case 'DELETE-IMG-SETTINGS':\r\n            return {\r\n                ...state,\r\n                bgBody: ''\r\n            }\r\n        default  :\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const setInitialAC = () => ({type: 'SET-INITIAL'} as const);\r\nexport const BackgroundChangeAC = (name: string) => ({type: 'SET-BACKGROUND', name} as const);\r\nexport const ThemeChangeAC = (name: themType) => ({type: 'SET-THEME', name} as const);\r\nexport const DeleteOllSettingsAC = () => ({type: 'DELETE-OLL-SETTINGS'} as const);\r\nexport const DeleteSettingsThemeAC = () => ({type: 'DELETE-THEME-SETTINGS'} as const);\r\nexport const DeleteSettingsImgAC = () => ({type: 'DELETE-IMG-SETTINGS'} as const);\r\nexport const setInitialTC = () => (dispatch: Dispatch<any>) => {\r\n    let promise = dispatch(setAuthMyTC());\r\n    Promise.all([promise]).then(() => {\r\n        //debugger\r\n        dispatch(setInitialAC());\r\n    })\r\n\r\n};\r\n\r\n\r\nexport default appReducer;\r\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport dialogReducer from \"./DialogReducer\";\r\nimport profileReducer from \"./ProfileReducer\";\r\nimport usersReducer from \"./UsersReducer\";\r\nimport authReducer from \"./AuthReducer\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\n//import {reduser as formReducer} from 'redux-form'\r\nimport { reducer as formReducer } from 'redux-form'\r\nimport appReducer from \"./AppReducer\";\r\n\r\nexport type RootStateType = ReturnType<typeof reducers>\r\n\r\nlet reducers = combineReducers({\r\n    profile: profileReducer,\r\n    dialogs: dialogReducer,\r\n    users: usersReducer,\r\n    auth: authReducer,\r\n    form: formReducer,\r\n    app: appReducer,\r\n    //login: lo\r\n});\r\n\r\nlet store = createStore(reducers,applyMiddleware(thunkMiddleware));\r\n// @ts-ignore\r\nwindow.store = store\r\nexport default store;\r\n","import React from 'react';\r\nimport cl from './css/Footer.module.css';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/ReduxStore\";\r\nimport {themType} from \"../redux/AppReducer\";\r\nimport style from  './TemplateSettings/ThemeChange.module.css';\r\n\r\nfunction Footer (){\r\n    const theme = useSelector<RootStateType,themType>(state => state.app.theme);\r\n    return(\r\n        <footer className={`${cl.footer} ${style[theme]}`}>\r\n            <div className={`${cl.footerWrap}`}>\r\n                This is block for the footer\r\n            </div>\r\n        </footer>\r\n    );\r\n}\r\n\r\nexport default Footer ;","import React from 'react';\r\nimport {NavLink} from 'react-router-dom'\r\nimport cl from './css/Navbar.module.css';\r\nimport style from  './TemplateSettings/ThemeChange.module.css';\r\nimport music from '../assets/img/undraw_video_upload_3d4u.png';\r\nimport news from '../assets/img/undraw_experience_design_eq3j.png';\r\nimport profile from '../assets/img/undraw_online_popularity_elhc.png';\r\nimport dialogs from '../assets/img/undraw_design_team_af2y.png';\r\nimport settings from '../assets/img/undraw_good_team_m7uu.png';\r\nimport users from '../assets/img/undraw_online_test_gba7.png';\r\nimport {useSelector} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/ReduxStore\";\r\nimport {InitialStateType, themType} from \"../redux/AppReducer\";\r\n\r\n\r\nexport type NavbarType = {\r\n\r\n}\r\n\r\nfunction Navbar () {\r\n    const theme = useSelector<RootStateType,themType>(state => state.app.theme);\r\n    return(\r\n    <nav className={`${cl.menu} ${style[theme+'Menu']}`} >\r\n      <ul>\r\n          <li className={`${cl.menuItem}`}><img src={users} alt=\"users\"/><NavLink to='/users'>Users</NavLink></li>\r\n        <li className={`${cl.menuItem} ${cl.active}`}><img src={profile} alt=\"profile\"/><NavLink to='/profile'>Blog</NavLink></li>\r\n        <li className={`${cl.menuItem}`}><img src={dialogs} alt=\"dialogs\"/><NavLink to='/dialogs'>Messages</NavLink></li>\r\n        <li className={`${cl.menuItem}`}><img src={news} alt=\"news\"/><NavLink to='/news'>News</NavLink></li>\r\n        <li className={`${cl.menuItem}`}><img src={music} alt=\"music\"/><NavLink to='/music'>Music</NavLink></li>\r\n        <li className={`${cl.menuItem}`}><img src={settings} alt=\"settings\"/><NavLink to='/settings'>Settings</NavLink></li>\r\n      </ul>\r\n    </nav>\r\n    )\r\n}\r\n\r\n\r\n\r\n// function Navbar () {\r\n//    return(\r\n//    <nav className='menu'>\r\n//      <ul>\r\n//        <li className='menu__item active'>\r\n//            {/* <NavLink to='/profile'> */}\r\n//                Blog\r\n//                {/* </NavLink> */}\r\n//                </li>\r\n//        <li className='menu__item'>\r\n//            {/* <NavLink to='/dialogs'> */}\r\n//                Messages\r\n//                {/* </NavLink> */}\r\n//                </li>\r\n//        <li className='menu__item'>\r\n//            {/* <NavLink to='/news'> */}\r\n//                News\r\n//                {/* </NavLink> */}\r\n//                </li>\r\n//        <li className='menu__item'>\r\n//            {/* <NavLink to='/music'> */}\r\n//                Music\r\n//                {/* </NavLink> */}\r\n//                </li>\r\n//        <li className='menu__item'>\r\n//            {/* <NavLink to='/settings'> */}\r\n//                Settings\r\n//                {/* </NavLink> */}\r\n//                </li>\r\n//        <li className='menu__item'>\r\n//            {/* <NavLink to='/users'> */}\r\n//                Users\r\n//                {/* </NavLink> */}\r\n//                </li>\r\n//      </ul>\r\n//    </nav>\r\n//    )\r\n// }\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport cl from './css/Header.module.css';\r\nimport style from  './TemplateSettings/ThemeChange.module.css';\r\nimport logo from '../assets/img/undraw_reminder_pa79.png';\r\nimport defoultAva from '../assets/img/undraw_mobile_web_2g8b.png';\r\nimport btnImg from '../assets/img/search.png'\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {photosType} from './ProfileWrap';\r\nimport {themType} from \"../redux/AppReducer\";\r\n\r\ntype propsType = {\r\n    aught: boolean\r\n    photos: photosType | null\r\n    login: string | null\r\n    logOutTC: () => void\r\n    theme:themType\r\n}\r\n\r\nfunction Header(props: propsType) {\r\n    // debugger\r\n    return (\r\n        <header className={`${cl.header} ${style[props.theme]}`}>\r\n            <a href='http://webstydio.lisa15.ru/#bottom-content'>\r\n                <img src={logo} className='poolLeft'/>\r\n            </a>\r\n            <div className={cl.wrap}>\r\n                <input type=\"text\"/>\r\n                <button className={cl.btnImg}><img src={btnImg} alt=\"\"/></button>\r\n            </div>\r\n            <span className={cl.login}>\r\n               {props.aught ?\r\n                   // <span>{props.photos?.small ? <img src={ props.photos.small } className={cl.ava} alt=\"ava\"/> :  'please for ava'}\r\n                   <div className={cl.dFlex}>{props.photos?.small ?\r\n                       <img src={props.photos.small} className={cl.ava} alt=\"ava\"/> :\r\n                       <img src={defoultAva} alt=\"defoultAva\" className={cl.ava}/>}\r\n                       <div>\r\n                           {props.login}\r\n                           <br/>\r\n                           <button onClick={props.logOutTC}>exit</button>\r\n                       </div>\r\n                   </div>\r\n                   : <NavLink to={'/login'}>Login</NavLink>\r\n               }\r\n            </span>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport Header from \"./Header\";\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/ReduxStore\";\r\nimport {logOutTC} from \"../redux/AuthReducer\";\r\nimport {photosType} from \"./ProfileWrap\";\r\nimport {getUserProfileTC} from \"../redux/ProfileReducer\";\r\nimport { themType } from '../redux/AppReducer';\r\n\r\ntype DispatchStateType = {\r\n    // setAuthMyTC: () => void\r\n    logOutTC: () => void\r\n}\r\n\r\ntype MapStateType = {\r\n    aught: boolean\r\n    avatar: photosType | null\r\n    id: number | null\r\n    email: string | null\r\n    login: string | null\r\n    theme: themType\r\n}\r\n\r\n\r\nclass HeaderWrap extends React.Component <MapStateType & DispatchStateType> {\r\n    // componentDidMount() {\r\n    //     // AuthMyApi.getMy()\r\n    //     //     .then(response => {\r\n    //     //         if (response.resultCode === 0) {\r\n    //     //             debugger\r\n    //     //             let {id, email, login} = response.data\r\n    //     //             this.props.authMyData(id, email, login)\r\n    //     //         }\r\n    //     //       //  let userId=response.data.data.id\r\n    //     //     });\r\n    //     this.props.setAuthMyTC()\r\n    //     // ProfileUserApi.getUser(+userId)\r\n    //     //     .then(response => {\r\n    //     //         // this.props.toggleIsFetching(false)\r\n    //     //         this.props.authMyData(response.data);\r\n    //     //     });\r\n    //\r\n    //\r\n    // }\r\n\r\n    render() {\r\n        return (\r\n            <Header\r\n                login={this.props.login}\r\n                aught={this.props.aught}\r\n                photos={this.props.avatar}\r\n                logOutTC={this.props.logOutTC}\r\n                theme={this.props.theme}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateType => {\r\n    return {\r\n        id: state.auth.id,\r\n        email: state.auth.email,\r\n        login: state.auth.login,\r\n        avatar: state.auth.avatar,\r\n        aught: state.auth.aught,\r\n        theme: state.app.theme,\r\n    }\r\n}\r\nexport default connect\r\n    //<MapStateType, DispatchStateType, {}, RootStateType>\r\n    (mapStateToProps, {\r\n        // setAuthMyTC,\r\n        logOutTC\r\n    })(HeaderWrap);","import React from 'react';\r\nimport { Redirect} from \"react-router-dom\";\r\nimport {reduxForm, Field, InjectedFormProps} from \"redux-form\";\r\nimport {renderCheckbox, renderTextField} from '../common/FormControl/FormControl';\r\nimport {validate} from \"../expansive/validate\";\r\nimport cl from './css/login.module.css'\r\ntype FormDataType = {\r\n    // aught:boolean\r\n    // photos:photosType| null\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit} className={cl.loginForm}>\r\n            {/*<Field type=\"text\" placeholder={'login'} component={'input'} name={'login'}/>*/}\r\n            <Field type=\"text\" placeholder={'login'} component={renderTextField} name={'email'} id=\"outlined-multiline-flexible\"\r\n                   label='login' variant=\"outlined\"/>\r\n            <Field type='password' placeholder={'password'} component={renderTextField} name={'password'} id=\"outlined-multiline-flexible\"\r\n                   label='password' variant=\"outlined\" className={cl.input} style={{borderColor: 'green'}}/>\r\n            <Field type=\"checkbox\" placeholder={'remember me'} component={renderCheckbox} name={'rememberMe'}/>\r\n            {props.error && <div className={cl.errorForm}>{props.error}</div>}\r\n            <button type={\"submit\"}>login</button>\r\n        </form>\r\n    )\r\n}\r\nconst LoginReduxForm = reduxForm<FormDataType>({form: 'login', validate})(LoginForm)\r\ntype loginPropsType={\r\n    loginTC: (email: string, password: string, rememberMe: boolean) => void\r\n    aught:boolean\r\n}\r\nfunction Login(props:loginPropsType) {\r\n    const onSubmit = (formData: FormDataType) => {\r\n        props.loginTC(formData.email,formData.password,formData.rememberMe)\r\n    }\r\n    if (props.aught) {\r\n       return <Redirect to={'/profile'}/>\r\n    }\r\n    return (\r\n        <div>\r\n            <h3>page login</h3>\r\n            <LoginReduxForm onSubmit={onSubmit}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n\r\n\r\n//npm add redux-form\r\n//npm i redux-form\r\n//npm i @types/redux-form","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {RootStateType} from \"../redux/ReduxStore\";\r\nimport {loginTC} from \"../redux/AuthReducer\";\r\nimport Login from \"./Login\";\r\n\r\ntype DispatchStateType = {\r\n    loginTC: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\ntype MapStateType = {\r\n    aught: boolean\r\n    captchaUrl?: string | null\r\n}\r\n\r\nclass LoginWrap extends React.Component <MapStateType & DispatchStateType> {\r\n\r\n\r\n    render() {\r\n        return (\r\n            <Login\r\n                //  photos={this.props.avatar}\r\n                loginTC={this.props.loginTC}\r\n                aught={this.props.aught}\r\n            />\r\n        )\r\n    }\r\n}\r\n\r\nlet mapStateToProps = (state: RootStateType): MapStateType => {\r\n    return {\r\n        aught: state.auth.aught,\r\n        //captchaUrl: state.auth.\r\n    }\r\n}\r\nexport default connect <MapStateType, DispatchStateType, {}, RootStateType>\r\n    (mapStateToProps, {loginTC})(LoginWrap);","import React, {useEffect} from \"react\";\r\nimport  cl from './BackgroundChange.module.css'\r\nimport bgGray from '../../assets/img/bg/bg1.jpeg';\r\nimport bgCrazy from '../../assets/img/bg/bg2.jpg';\r\nimport bgGrin from '../../assets/img/bg/bg3.jpg';\r\nimport bgRain from '../../assets/img/bg/bg4.jpg';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {BackgroundChangeAC, DeleteSettingsImgAC, DeleteSettingsThemeAC} from \"../../redux/AppReducer\";\r\n\r\nexport  const BackgroundChange = () => {\r\n    const dispatch = useDispatch();\r\n    const onChangeBg=(name:string)=>{\r\n        // debugger\r\n        dispatch(BackgroundChangeAC(name))\r\n        localStorage.setItem('backroundName',name)\r\n    }\r\n    const deleteBg = () => {\r\n        // debugger\r\n        dispatch(DeleteSettingsImgAC())\r\n        localStorage.removeItem('backroundName')\r\n    }\r\n    let bgArr=[{name: bgGray,key:'bgGray'}, {name: bgCrazy,key: 'bgCrazy'}, {name: bgGrin,key: 'bgGrin'}, {name: bgRain,key: 'bgRain'}];\r\n    let example=bgArr.map(bg=><div className={cl.img} key={bg.key}  onClick={()=>{onChangeBg(bg.key)}}><img src={bg.name} alt={bg.key}/></div>)\r\n    return(\r\n        <>\r\n        <div className={`${cl.dFlex}`}>\r\n            {example}\r\n        </div>\r\n            <button onClick={deleteBg}>delete image</button>\r\n            </>\r\n    )\r\n}","import React, {useEffect} from \"react\";\r\nimport cl from './BackgroundChange.module.css';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {ThemeChangeAC, themType, DeleteSettingsThemeAC} from \"../../redux/AppReducer\";\r\nimport red from '../../assets/img/bg/red.jpg';\r\nimport blue from '../../assets/img/bg/blue.jpg';\r\nimport light from '../../assets/img/bg/light.jpg';\r\nimport dark from '../../assets/img/bg/dark.jpg';\r\n\r\ntype themeType = {\r\n    name: themType\r\n    preview: any\r\n}\r\nexport const ThemeChange = () => {\r\n    const dispatch = useDispatch();\r\n    const onChangeBg = (name: themType) => {\r\n        // debugger\r\n        dispatch(ThemeChangeAC(name))\r\n        localStorage.setItem('theme', name)\r\n    }\r\n    const deleteBg = () => {\r\n        // debugger\r\n        dispatch(DeleteSettingsThemeAC())\r\n        localStorage.removeItem('theme')\r\n    }\r\n    let themesArr: Array<themeType> = [{name: 'dark', preview: dark}, {name: 'light', preview: light}, {\r\n        name: 'blue',\r\n        preview: blue\r\n    }, {name: 'red', preview: red}];\r\n    let example = themesArr.map(bg => <div className={cl.img} key={bg.name} onClick={() => {\r\n        // debugger\r\n        onChangeBg(bg.name)\r\n    }}>\r\n        <p>{bg.name}</p>\r\n        <img src={bg.preview} alt={bg.name}/>\r\n    </div>)\r\n    return (\r\n        <>\r\n            <div className={`${cl.dFlex}`}>\r\n                {example}\r\n            </div>\r\n            <button onClick={deleteBg}>remove theme</button>\r\n\r\n        </>\r\n    )\r\n}","import React from 'react';\r\nimport {BackgroundChange} from \"./TemplateSettings/BackgroundChange\";\r\nimport {ThemeChange} from \"./TemplateSettings/ThemeChange\";\r\nimport { DeleteOllSettingsAC} from \"../redux/AppReducer\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\ntype SettingsType = {}\r\nexport const Settings = () => {\r\n    const dispatch = useDispatch()\r\n    const deleteSettings = () => {\r\n        // debugger\r\n        dispatch(DeleteOllSettingsAC())\r\n        localStorage.clear()\r\n    }\r\n    return (\r\n        // <h4>settings:</h4>\r\n        <section className='content'>\r\n            <h4>settings:</h4>\r\n            <BackgroundChange/>\r\n            <hr/>\r\n            <ThemeChange/>\r\n            <hr/>\r\n            <button onClick={deleteSettings}>remove setting</button>\r\n        </section>\r\n    );\r\n}","import React from 'react';\nimport stule from './App.module.css';\nimport style from './components/TemplateSettings/ThemeChange.module.css';\nimport cl from './components/TemplateSettings/BackgroundChange.module.css';\nimport {Route, withRouter} from 'react-router-dom';\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport Footer from './components/Footer';\nimport Navbar from './components/Navbar';\nimport HeaderWrap from \"./components/HeaderWrap\";\nimport LoginWrap from \"./components/LoginWrap\";\nimport {BackgroundChangeAC, setInitialTC, ThemeChangeAC, themType} from \"./redux/AppReducer\";\nimport {RootStateType} from \"./redux/ReduxStore\";\nimport {Preloader} from \"./common/Preloader\";\nimport {Settings} from \"./components/Settings\"\n\n//const Settings = React.lazy(() => import (\"./components/Settings\"));\nconst News = React.lazy(() => import ( \"./components/News\"));\nconst Music = React.lazy(() => import ( \"./components/Music\"));\nconst DialogsWrap = React.lazy(() => import (\"./components/DialogsWrap\"));\nconst UsersWrap = React.lazy(() => import ( \"./components/Users/UsersWrap\"));\nconst ProfileWrap = React.lazy(() => import (\"./components/ProfileWrap\"));\n\ntype MapStateType = {\n    initial: boolean\n    bgBody: string\n    theme: themType\n}\ntype DispatchStateType = {\n    setInitialTC: () => void\n    ThemeChangeAC: (name: themType) => void\n    BackgroundChangeAC: (name: string) => void\n}\ntype OwnProps = {}\ntype bodyType = string[];\nconst body: bodyType = ['bgGray', 'bgCrazy'];\n\nclass App extends React.Component <MapStateType & DispatchStateType & OwnProps> {\n    componentDidMount() {\n        this.props.setInitialTC()\n        const name = localStorage.getItem('theme') as themType\n        if (name) {\n            this.props.ThemeChangeAC(name)\n        }\n        const bgName = localStorage.getItem('backroundName');\n        if (bgName) {\n            this.props.BackgroundChangeAC(bgName)\n        }\n    }\n\n    render() {\n        if (!this.props.initial) {\n            return <Preloader/>\n        }\n        return (\n            // <IsAuthContext.Provider  value={false}>\n            <div className={stule.appWrapper}>\n                <HeaderWrap/>\n                <Navbar/>\n                <React.Suspense fallback={'...loading'}>\n                <div className={`${stule.wrappContent} ${style[this.props.theme + 'Body']} ${cl[this.props.bgBody]}`}>\n                    <Route path={\"/dialogs\"} render={() => <DialogsWrap/>}/>\n                    <Route path={\"/users\"} render={() => <UsersWrap/>}/>\n                    <Route path={\"/profile/:userID?\"} render={() => <ProfileWrap/>}/>\n                    <Route path={\"/login\"} render={() => <LoginWrap/>}/>\n                    <Route path={\"/news\"} render={() => <News/>}/>\n                    <Route path={\"/music\"} render={() => <Music/>}/>\n                    <Route path={\"/settings\"} render={() => <Settings/>}/>\n\n                </div>\n                </React.Suspense>\n                <Footer/>\n            </div>\n            // </IsAuthContext.Provider>\n        );\n    }\n}\n\nconst mapStateToProps = (state: RootStateType): MapStateType => ({\n    initial: state.app.initial,\n    bgBody: state.app.bgBody,\n    theme: state.app.theme,\n})\nexport default compose<React.ComponentClass>(\n    withRouter,\n    connect<MapStateType, DispatchStateType, OwnProps, RootStateType>(mapStateToProps, {\n        setInitialTC, ThemeChangeAC, BackgroundChangeAC\n    }))(App);","import React from 'react';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport store from \"./redux/ReduxStore\"\nimport {Provider} from \"react-redux\";\nimport App from \"./App\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n   <BrowserRouter>\n       <Provider store={store}>\n       <App\n           // store={store}\n           // state={state}\n            // dispatch={store.dispatch.bind(store)}\n      //  changeNewPostText={store.changeNewPostText.bind(store)}\n      //  sendMessage={store.sendMessage.bind(store)}\n      //  changeNewMessage={store.changeNewMessage.bind(store)}\n       />\n       </Provider>\n   </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// .bind(store)-связать со стором\n\n\n\nserviceWorker.unregister();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"menu\":\"Navbar_menu__RwDgS\",\"menuItem\":\"Navbar_menuItem__2w_YR\",\"active\":\"Navbar_active__1ADWr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dark\":\"ThemeChange_dark__3nb08\",\"darkBody\":\"ThemeChange_darkBody__2D9i3\",\"darkMenu\":\"ThemeChange_darkMenu__3gHYM\",\"darkPag\":\"ThemeChange_darkPag__3_WAj\",\"currentPage\":\"ThemeChange_currentPage__1hF5o\",\"ollPage\":\"ThemeChange_ollPage__23h0o\",\"light\":\"ThemeChange_light__U4KPb\",\"lightBody\":\"ThemeChange_lightBody__3FCdz\",\"lightMenu\":\"ThemeChange_lightMenu__wRoqy\",\"menuItem\":\"ThemeChange_menuItem__3Hbh1\",\"active\":\"ThemeChange_active__aScSk\",\"lightPag\":\"ThemeChange_lightPag__2yAO0\",\"blue\":\"ThemeChange_blue__5i6J4\",\"blueBody\":\"ThemeChange_blueBody__3Kj9N\",\"blueMenu\":\"ThemeChange_blueMenu__3sBtL\",\"bluePag\":\"ThemeChange_bluePag__1d56f\",\"red\":\"ThemeChange_red__39TTV\",\"redBody\":\"ThemeChange_redBody__XsXSM\",\"redMenu\":\"ThemeChange_redMenu__3Zi0F\",\"redPag\":\"ThemeChange_redPag__2IOVL\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dFlex\":\"BackgroundChange_dFlex__1-1x0\",\"img\":\"BackgroundChange_img___I-Pt\",\"bgGray\":\"BackgroundChange_bgGray__2nncn\",\"bgCrazy\":\"BackgroundChange_bgCrazy__2t_1r\",\"bgGrin\":\"BackgroundChange_bgGrin__UNCsI\",\"bgRain\":\"BackgroundChange_bgRain__2GQ3S\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__2Hit9\",\"dFlex\":\"Header_dFlex__EBiYl\",\"ava\":\"Header_ava__27SUf\",\"contact\":\"Header_contact__2ciG2\",\"search\":\"Header_search__1_vei\",\"avatar\":\"Header_avatar__35che\",\"wrap\":\"Header_wrap__2eMZp\",\"btnImg\":\"Header_btnImg__2vQTB\",\"login\":\"Header_login__ZsfSu\"};","import React from \"react\";\r\nimport type {WrappedFieldMetaProps, WrappedFieldProps} from 'redux-form';\r\nimport {Checkbox, FormControlLabel, TextField} from \"@material-ui/core\";\r\nimport FormHelperText from \"@material-ui/core/FormHelperText\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\n\r\ntype FormControlPropsType = {\r\n    meta: WrappedFieldMetaProps\r\n}\r\nconst validate = (values: any) => {\r\n    const errors:any = {}\r\n    const requiredFields:Array<string> = [\r\n        'login',\r\n        'password',\r\n        'email',\r\n    ]\r\n    requiredFields.forEach(field => {\r\n        if (!values[field]) {\r\n            errors[field] = 'Required'\r\n        }\r\n    })\r\n    if (\r\n        values.email &&\r\n        !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)\r\n    ) {\r\n        errors.email = 'Invalid email address'\r\n    }\r\n    return errors\r\n}\r\nexport const FormControl: React.FC<FormControlPropsType> = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error;\r\n    return (\r\n        <div>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Textarea: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><textarea {...input} {...restProps} /></FormControl>\r\n}\r\n\r\nexport const Input: React.FC<WrappedFieldProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return <FormControl {...props}><input {...input} {...restProps} /></FormControl>\r\n}\r\ntype someType={\r\n    label:string\r\n    validate?:boolean\r\n}\r\nconst CssTextField = withStyles({\r\n    root: {\r\n        '& label.Mui-focused': {\r\n            color: '#4b1668',\r\n            background:'transparent!important',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: '#4b1668',\r\n            background:'transparent!important',\r\n        },\r\n        '& .MuiOutlinedInput-root': {\r\n            '& fieldset': {\r\n                borderColor: '#4b1668',\r\n                background:'transparent!important',\r\n            },\r\n            '&:hover fieldset': {\r\n                borderColor: '#d280f8',\r\n                background:'transparent!important',\r\n            },\r\n            '&.Mui-focused fieldset': {\r\n                borderColor: '#d280f8',\r\n                background:'transparent!important',\r\n            },\r\n        },\r\n    },\r\n})(TextField);\r\nexport const renderTextField: React.FC<WrappedFieldProps & someType> = ({\r\n                              label,\r\n                              input,\r\n                              meta: { touched, invalid, error },\r\n                              ...custom\r\n                          }) => (\r\n    <CssTextField\r\n        label={label}\r\n        placeholder={label}\r\n        error={touched && invalid}\r\n        helperText={touched && error}\r\n\r\n        {...input}\r\n        {...custom}\r\n    />\r\n)\r\nexport const renderCheckbox: React.FC<WrappedFieldProps & someType>  = ({ input, label }) => (\r\n    <div>\r\n        <FormControlLabel\r\n            control={\r\n                <Checkbox\r\n                    checked={input.value ? true : false}\r\n                    onChange={input.onChange}\r\n                />\r\n            }\r\n            label={label}\r\n        />\r\n    </div>\r\n)\r\ntype renderMaterialUiFromHelperType={\r\n    touched: boolean\r\n    error:string\r\n}\r\nconst renderMaterialUiFromHelper = ({ touched, error }:renderMaterialUiFromHelperType  ) => {\r\n    if (!(touched && error)) {\r\n        return\r\n    } else {\r\n        return <FormHelperText>{touched && error}</FormHelperText>\r\n    }\r\n}\r\n// const renderField = ({\r\n//                          input,\r\n//                          label,\r\n//                          type,\r\n//                          meta: { touched, error, warning }\r\n//                      }) => (\r\n//     <div>\r\n//         <label>{label}</label>\r\n//         <div>\r\n//             <input {...input} placeholder={label} type={type} />\r\n//             {touched &&\r\n//             ((error && <span>{error}</span>) ||\r\n//                 (warning && <span>{warning}</span>))}\r\n//         </div>\r\n//     </div>\r\n// )\r\n\r\n//https://redux-form.com/8.3.0/examples/fieldlevelvalidation/"],"sourceRoot":""}